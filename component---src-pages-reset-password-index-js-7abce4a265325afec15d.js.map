{"version":3,"sources":["webpack:///./src/pages/reset-password/index.js","webpack:///./src/common/validation.js"],"names":["StyledContainer","styled","Container","FullwidthStyledContainer","TextContainer","MessageText","Text","device","mobileL","ButtonContainer","div","InputGroup","StyledButton","Button","resetValidation","values","errors","email_error","validation","email","trimSpaces","resetSubmission","actions","binary_socket","BinarySocketBase","init","onopen","send","JSON","stringify","verify_email","type","onmessage","msg","response","parse","data","setSubmitting","error","setStatus","message","resetForm","success","localize","close","WithIntl","body","React","useState","has_prompt","setOnePasswordPrompt","background","justify","align","direction","as","mb","mt","translate_text","tertiary","onClick","Login","redirectToLogin","secondary","weight","initialValues","initialStatus","validate","onSubmit","handleChange","handleBlur","isSubmitting","status","noValidate","id","name","value","handleError","onChange","onBlur","autoComplete","label","placeholder","data-lpignore","required","color","disabled","is_fullpage","margin_top","title","description","no_index","validation_regex","input","test"],"mappings":"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","file":"component---src-pages-reset-password-index-js-7abce4a265325afec15d.js","sourcesContent":["import { Form, Formik } from 'formik'\nimport React from 'react'\nimport styled from 'styled-components'\nimport Login from 'common/login'\nimport { trimSpaces } from 'common/utility'\nimport validation from 'common/validation'\nimport { BinarySocketBase } from 'common/websocket/socket_base'\nimport { Container, SEO } from 'components/containers'\nimport { Header, Text } from 'components/elements'\nimport { Button, Input } from 'components/form'\nimport Layout from 'components/layout/layout'\nimport { Localize, localize, WithIntl } from 'components/localization'\nimport device from 'themes/device'\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 100vh;\n`\n\nconst FullwidthStyledContainer = styled(StyledContainer)`\n    max-width: 100%;\n    width: 100%;\n`\n\nconst TextContainer = styled(FullwidthStyledContainer)`\n    max-width: 82rem;\n    justify-content: start;\n`\nconst MessageText = styled(Text)`\n    @media ${device.mobileL} {\n        margin: 0 3rem;\n    }\n`\n\nconst ButtonContainer = styled.div`\n    margin-top: 2rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst InputGroup = styled.div`\n    width: 40rem;\n    margin: 0 auto 3.4rem;\n`\n\nconst StyledButton = styled(Button)`\n    &:first-child {\n        justify-self: end;\n    }\n\n    margin: 0.8rem 0.4rem;\n    width: max-content;\n`\n\nconst resetValidation = (values) => {\n    let errors = {}\n\n    const email_error = validation.email(trimSpaces(values.email))\n\n    if (email_error) {\n        errors.email = email_error\n    }\n\n    return errors\n}\n\nconst resetSubmission = (values, actions) => {\n    const binary_socket = BinarySocketBase.init()\n\n    binary_socket.onopen = () => {\n        binary_socket.send(\n            JSON.stringify({ verify_email: trimSpaces(values.email), type: 'reset_password' }),\n        )\n    }\n    binary_socket.onmessage = (msg) => {\n        const response = JSON.parse(msg.data)\n        actions.setSubmitting(false)\n        if (response.error) {\n            actions.setStatus({\n                error: response.error.message,\n            })\n            return\n        }\n\n        actions.resetForm({ email: '' })\n        actions.setStatus({\n            success: localize(\n                'Please check your email and click on the link provided to reset your password.',\n            ),\n        })\n        binary_socket.close()\n    }\n}\n\nconst ResetPassword = () => {\n    const [has_prompt, setOnePasswordPrompt] = React.useState(true)\n    let body\n    if (!has_prompt) {\n        body = (\n            <StyledContainer justify=\"start\" align=\"center\" direction=\"column\">\n                <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"80px\">\n                    {localize('Reset password')}\n                </Header>\n                <Header\n                    as=\"h4\"\n                    type=\"sub-section-title\"\n                    align=\"center\"\n                    weight=\"500\"\n                    mt=\"0.5rem\"\n                    mb=\"3.8rem\"\n                >\n                    {localize(\"We'll email you instructions to reset your password.\")}\n                </Header>\n                <Formik\n                    initialValues={{ email: '' }}\n                    initialStatus={{}}\n                    validate={resetValidation}\n                    onSubmit={resetSubmission}\n                >\n                    {({\n                        values,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                        resetForm,\n                        status,\n                    }) => (\n                        <Form noValidate>\n                            <InputGroup>\n                                <Input\n                                    id=\"email\"\n                                    name=\"email\"\n                                    error={errors.email}\n                                    value={trimSpaces(values.email)}\n                                    handleError={resetForm}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    autoComplete=\"off\"\n                                    type=\"text\"\n                                    label={localize('Email')}\n                                    background=\"white\"\n                                    placeholder={'example@mail.com'}\n                                    data-lpignore=\"true\"\n                                    required\n                                />\n                            </InputGroup>\n                            <Text align=\"center\" color=\"red\">\n                                {status.error && status.error}\n                            </Text>\n                            <Text align=\"center\" color=\"green\">\n                                {status.success && status.success}\n                            </Text>\n                            <ButtonContainer>\n                                <StyledButton\n                                    tertiary\n                                    onClick={Login.redirectToLogin}\n                                    type=\"button\"\n                                >\n                                    {localize('Return to log in')}\n                                </StyledButton>\n                                <StyledButton\n                                    secondary=\"true\"\n                                    disabled={isSubmitting}\n                                    type=\"submit\"\n                                >\n                                    {localize('Reset my password')}\n                                </StyledButton>\n                            </ButtonContainer>\n                        </Form>\n                    )}\n                </Formik>\n            </StyledContainer>\n        )\n    } else {\n        body = (\n            <FullwidthStyledContainer background=\"var(--color-grey-31);\">\n                <TextContainer justify=\"flex-start\" align=\"center\" direction=\"column\">\n                    <Header as=\"h2\" type=\"section-title\" align=\"center\" mb=\"2rem\" mt=\"80px\">\n                        {localize('All you’ll need from now is one password')}\n                    </Header>\n                    <MessageText align=\"center\" mb=\"2rem\">\n                        <Localize translate_text=\"We’ve upgraded our system to support a single, more secure password across Deriv. Once you’ve set a new password, you can use it to log into all your Deriv and DMT5 accounts.\" />\n                    </MessageText>\n                    <ButtonContainer>\n                        <StyledButton tertiary onClick={Login.redirectToLogin} type=\"button\">\n                            {localize('Return to log in')}\n                        </StyledButton>\n                        <StyledButton\n                            secondary=\"true\"\n                            type=\"button\"\n                            onClick={() => setOnePasswordPrompt(false)}\n                        >\n                            {localize('Reset my password')}\n                        </StyledButton>\n                    </ButtonContainer>\n                </TextContainer>\n            </FullwidthStyledContainer>\n        )\n    }\n    return (\n        <Layout type=\"static\" is_fullpage margin_top=\"0\">\n            <SEO\n                title={localize('Reset password | Deriv')}\n                description={localize(\n                    'Forgot your Deriv password? Want to reset your password? Send us your email address and we’ll email you the instructions.',\n                )}\n                no_index\n            />\n            {body}\n        </Layout>\n    )\n}\n\nexport default WithIntl()(ResetPassword)\n","import { localize } from 'components/localization'\n\nconst validation_regex = {\n    email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}$/,\n}\n\nconst validation = {\n    // Validation will return a string for error message\n    email: (input) => {\n        if (!input) {\n            return localize('Email is required')\n        } else if (!validation_regex.email.test(input)) {\n            return localize('Invalid email address')\n        } else {\n            return null\n        }\n    },\n}\n\nexport default validation\n"],"sourceRoot":""}